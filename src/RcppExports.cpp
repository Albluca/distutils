// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// PartialDistance
NumericMatrix PartialDistance(NumericMatrix Ar, NumericMatrix Br);
RcppExport SEXP _distutils_PartialDistance(SEXP ArSEXP, SEXP BrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Ar(ArSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Br(BrSEXP);
    rcpp_result_gen = Rcpp::wrap(PartialDistance(Ar, Br));
    return rcpp_result_gen;
END_RCPP
}
// Partition
List Partition(NumericMatrix Ar, NumericMatrix Br, NumericVector SquaredAr);
RcppExport SEXP _distutils_Partition(SEXP ArSEXP, SEXP BrSEXP, SEXP SquaredArSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Ar(ArSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Br(BrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SquaredAr(SquaredArSEXP);
    rcpp_result_gen = Rcpp::wrap(Partition(Ar, Br, SquaredAr));
    return rcpp_result_gen;
END_RCPP
}
// ElasticEnergy
List ElasticEnergy(NumericMatrix X, NumericMatrix NodePositions, NumericMatrix ElasticMatrix, NumericVector Dists, double BranchingFee);
RcppExport SEXP _distutils_ElasticEnergy(SEXP XSEXP, SEXP NodePositionsSEXP, SEXP ElasticMatrixSEXP, SEXP DistsSEXP, SEXP BranchingFeeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type NodePositions(NodePositionsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ElasticMatrix(ElasticMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Dists(DistsSEXP);
    Rcpp::traits::input_parameter< double >::type BranchingFee(BranchingFeeSEXP);
    rcpp_result_gen = Rcpp::wrap(ElasticEnergy(X, NodePositions, ElasticMatrix, Dists, BranchingFee));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_distutils_PartialDistance", (DL_FUNC) &_distutils_PartialDistance, 2},
    {"_distutils_Partition", (DL_FUNC) &_distutils_Partition, 3},
    {"_distutils_ElasticEnergy", (DL_FUNC) &_distutils_ElasticEnergy, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_distutils(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
